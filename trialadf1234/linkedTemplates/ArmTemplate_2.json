{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "trialadf1234"
		},
		"SqlServer2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer2'",
			"defaultValue": "Integrated Security=True;Data Source=DESKTOP-663P1AJ;Initial Catalog=gravity_books"
		},
		"SqlServer2_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer2'"
		},
		"SqlServer3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer3'"
		},
		"SqlServer4_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer4'",
			"defaultValue": "Integrated Security=True;Data Source=DESKTOP-663P1AJ;Initial Catalog=poakmm"
		},
		"SqlServer4_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer4'"
		},
		"SqlServer2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "AzureAD\\ArjunP"
		},
		"SqlServer4_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "AzureAD\\ArjunP"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongo_to_sql_matches')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "matches"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongo_to_sql_venues')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase4",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "venues"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongodb_ds_Bookings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "POAKMM_MONGO_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "Bookings"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongodb_ds_MatchCategories')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "POAKMM_MONGO_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "MatchCategories"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongodb_ds_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "POAKMM_MONGO_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "Customers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongodb_ds_matches')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "POAKMM_MONGO_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "Matches"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/poakmm_mongodb_ds_venues')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "POAKMM_MONGO_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MongoDbAtlasCollection",
				"schema": [],
				"typeProperties": {
					"collection": "Venues"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer2_connectionString')]",
					"userName": "[parameters('SqlServer2_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer2_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeSelfHosted1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer3_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntimeSelfHosted1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer4_connectionString')]",
					"userName": "[parameters('SqlServer4_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer4_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntimeSelfHosted1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "booking copy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['booking_id']['$numberInt']"
										},
										"sink": {
											"name": "booking_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['customer_id']['$numberInt']"
										},
										"sink": {
											"name": "customer_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['match_id']['$numberInt']"
										},
										"sink": {
											"name": "match_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['seat_number']['$numberInt']"
										},
										"sink": {
											"name": "seat_number",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "$['price']['$numberInt']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "poakmm_mongodb_ds_Bookings",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "POAKMM_MONGO_TO_SQL_Bookings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "matches copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "booking copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['match_id']['$numberInt']"
										},
										"sink": {
											"name": "match_id"
										}
									},
									{
										"source": {
											"path": "$['match_date']"
										},
										"sink": {
											"name": "match_date"
										}
									},
									{
										"source": {
											"path": "$['venue_id']['$numberInt']"
										},
										"sink": {
											"name": "venue_id"
										}
									},
									{
										"source": {
											"path": "$['category_id']['$numberInt']"
										},
										"sink": {
											"name": "category_id"
										}
									},
									{
										"source": {
											"path": "$['match_name']"
										},
										"sink": {
											"name": "match_name"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "poakmm_mongodb_ds_matches",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "poakmm_mongo_to_sql_matches",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "venues copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "matches copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['venue_id']['$numberInt']"
										},
										"sink": {
											"name": "venue_id"
										}
									},
									{
										"source": {
											"path": "$['venue_name']"
										},
										"sink": {
											"name": "venue_name"
										}
									},
									{
										"source": {
											"path": "$['venue_location']"
										},
										"sink": {
											"name": "venue_location"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "poakmm_mongodb_ds_venues",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "poakmm_mongo_to_sql_venues",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "customers copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "venues copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['customer_id']['$numberInt']"
										},
										"sink": {
											"name": "customer_id"
										}
									},
									{
										"source": {
											"path": "$['customer_name']"
										},
										"sink": {
											"name": "customer_name"
										}
									},
									{
										"source": {
											"path": "$['customer_email']"
										},
										"sink": {
											"name": "customer_email"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "poakmm_mongodb_ds_customers",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "poakmm_mongo_to_sql_customers",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "matchcategory copy",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "customers copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MongoDbAtlasSource",
								"batchSize": 100
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['category_id']['$numberInt']"
										},
										"sink": {
											"name": "category_id"
										}
									},
									{
										"source": {
											"path": "$['category_name']"
										},
										"sink": {
											"name": "category_name"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "poakmm_mongodb_ds_MatchCategories",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "poakmm_mongo_to_sql_MatchCategories",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"customers": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-04T10:01:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/poakmm_mongodb_ds_Bookings')]",
				"[concat(variables('factoryId'), '/datasets/poakmm_mongodb_ds_matches')]",
				"[concat(variables('factoryId'), '/datasets/poakmm_mongo_to_sql_matches')]",
				"[concat(variables('factoryId'), '/datasets/poakmm_mongodb_ds_venues')]",
				"[concat(variables('factoryId'), '/datasets/poakmm_mongo_to_sql_venues')]",
				"[concat(variables('factoryId'), '/datasets/poakmm_mongodb_ds_customers')]",
				"[concat(variables('factoryId'), '/datasets/poakmm_mongodb_ds_MatchCategories')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer4",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableNameFrmPipeline": {
						"type": "string",
						"defaultValue": "poakmm"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/db_local_database')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer4",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dbname": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().dbname",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/METRICS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Booking",
								"type": "DatasetReference"
							},
							"name": "Booking"
						},
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "Booking",
								"type": "DatasetReference"
							},
							"name": "Booking1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "Matches"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "Venues"
						},
						{
							"dataset": {
								"referenceName": "Booking",
								"type": "DatasetReference"
							},
							"name": "Booking2",
							"description": "Booking2"
						},
						{
							"dataset": {
								"referenceName": "Booking",
								"type": "DatasetReference"
							},
							"name": "Bookings3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Result_for_pokamm_metrics",
								"type": "DatasetReference"
							},
							"name": "TicketsPerUser"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable5",
								"type": "DatasetReference"
							},
							"name": "RevenuePerUser"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable6",
								"type": "DatasetReference"
							},
							"name": "MostPopularVenue"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable7",
								"type": "DatasetReference"
							},
							"name": "MostBookedSeats"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable8",
								"type": "DatasetReference"
							},
							"name": "MostPopularMatches"
						}
					],
					"transformations": [
						{
							"name": "NoOfTicketsByUser"
						},
						{
							"name": "joiningCustomerNames"
						},
						{
							"name": "NecessaryFields1"
						},
						{
							"name": "TotalRevenuePerUser"
						},
						{
							"name": "joiningCustomerName2"
						},
						{
							"name": "NecessaryFields2"
						},
						{
							"name": "MostPopularVenues"
						},
						{
							"name": "JoiningVenues2"
						},
						{
							"name": "NecessaryFields3"
						},
						{
							"name": "MostBookedSeat"
						},
						{
							"name": "rank1"
						},
						{
							"name": "MostBookedMatch"
						},
						{
							"name": "JoiningMatchName"
						},
						{
							"name": "JoiningVenues"
						},
						{
							"name": "NecessaryFields"
						},
						{
							"name": "TopMatches"
						}
					],
					"scriptLines": [
						"source(output(",
						"          booking_id as integer,",
						"          customer_id as integer,",
						"          match_id as integer,",
						"          seat_number as integer,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Booking",
						"source(output(",
						"          customer_id as integer,",
						"          customer_name as string,",
						"          customer_email as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customers",
						"source(output(",
						"          booking_id as integer,",
						"          customer_id as integer,",
						"          match_id as integer,",
						"          seat_number as integer,",
						"          price as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Booking1",
						"source(output(",
						"          match_id as integer,",
						"          match_date as date,",
						"          venue_id as integer,",
						"          category_id as integer,",
						"          match_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Matches",
						"source(output(",
						"          venue_id as integer,",
						"          venue_name as string,",
						"          venue_location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Venues",
						"source(output(",
						"          booking_id as integer,",
						"          customer_id as integer,",
						"          match_id as integer,",
						"          seat_number as integer,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Booking2",
						"source(output(",
						"          booking_id as integer,",
						"          customer_id as integer,",
						"          match_id as integer,",
						"          seat_number as integer,",
						"          price as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Bookings3",
						"Booking aggregate(groupBy(customer_id),",
						"     Number_of_tickets_by_customer = count(booking_id)) ~> NoOfTicketsByUser",
						"NoOfTicketsByUser, Customers join(NoOfTicketsByUser@customer_id == Customers@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCustomerNames",
						"joiningCustomerNames select(mapColumn(",
						"          customer_id = Customers@customer_id,",
						"          customer_name,",
						"          Number_of_tickets_by_customer,",
						"          customer_email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFields1",
						"Booking1 aggregate(groupBy(customer_id),",
						"     Total_revenue = sum(price)) ~> TotalRevenuePerUser",
						"TotalRevenuePerUser, Customers join(TotalRevenuePerUser@customer_id == Customers@customer_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCustomerName2",
						"joiningCustomerName2 select(mapColumn(",
						"          customer_id = TotalRevenuePerUser@customer_id,",
						"          Total_revenue,",
						"          customer_id = Customers@customer_id,",
						"          customer_name,",
						"          customer_email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFields2",
						"Matches aggregate(groupBy(venue_id),",
						"     total_event_happened = count(match_id)) ~> MostPopularVenues",
						"MostPopularVenues, Venues join(MostPopularVenues@venue_id == Venues@venue_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningVenues2",
						"JoiningVenues2 select(mapColumn(",
						"          venue_id = Venues@venue_id,",
						"          venue_name,",
						"          venue_location,",
						"          total_event_happened",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFields3",
						"Booking2 aggregate(groupBy(seat_number),",
						"     count = count(booking_id)) ~> MostBookedSeat",
						"MostBookedSeat rank(desc(count, true),",
						"     output(Rank as long),",
						"     dense: true) ~> rank1",
						"Bookings3 aggregate(groupBy(match_id),",
						"     Count_tickets = count(booking_id)) ~> MostBookedMatch",
						"MostBookedMatch, Matches join(MostBookedMatch@match_id == Matches@match_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningMatchName",
						"JoiningMatchName, Venues join(Matches@venue_id == Venues@venue_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningVenues",
						"JoiningVenues select(mapColumn(",
						"          match_id = MostBookedMatch@match_id,",
						"          match_name,",
						"          venue_name,",
						"          venue_location,",
						"          Count_tickets,",
						"          match_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFields",
						"NecessaryFields rank(asc(Count_tickets, true),",
						"     output(Rank as long),",
						"     dense: true) ~> TopMatches",
						"NecessaryFields1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TicketsPerUser",
						"NecessaryFields2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerUser",
						"NecessaryFields3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MostPopularVenue",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MostBookedSeats",
						"TopMatches sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MostPopularMatches"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POAKMM_PIPELINE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get table names",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "db_config_json",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "get each db name",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "get table names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get table names').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "db_local_database",
											"type": "DatasetReference",
											"parameters": {
												"dbname": {
													"value": "item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "db_sink_azdb",
											"type": "DatasetReference",
											"parameters": {
												"tablenamesink": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "METRICS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "METRICS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Booking": {},
									"Customers": {},
									"Booking1": {},
									"Matches": {},
									"Venues": {},
									"Booking2": {},
									"Bookings3": {},
									"TicketsPerUser": {},
									"RevenuePerUser": {},
									"MostPopularVenue": {},
									"MostBookedSeats": {},
									"MostPopularMatches": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-04T10:01:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/METRICS')]",
				"[concat(variables('factoryId'), '/datasets/db_local_database')]"
			]
		}
	]
}