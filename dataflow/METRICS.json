{
	"name": "METRICS",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Booking",
						"type": "DatasetReference"
					},
					"name": "Booking"
				},
				{
					"dataset": {
						"referenceName": "Customer",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "Booking",
						"type": "DatasetReference"
					},
					"name": "Booking1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "Matches"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "Venues"
				},
				{
					"dataset": {
						"referenceName": "Booking",
						"type": "DatasetReference"
					},
					"name": "Booking2",
					"description": "Booking2"
				},
				{
					"dataset": {
						"referenceName": "Booking",
						"type": "DatasetReference"
					},
					"name": "Bookings3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Result_for_pokamm_metrics",
						"type": "DatasetReference"
					},
					"name": "TicketsPerUser"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					},
					"name": "RevenuePerUser"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable6",
						"type": "DatasetReference"
					},
					"name": "MostPopularVenue"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable7",
						"type": "DatasetReference"
					},
					"name": "MostBookedSeats"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable8",
						"type": "DatasetReference"
					},
					"name": "MostPopularMatches"
				}
			],
			"transformations": [
				{
					"name": "NoOfTicketsByUser"
				},
				{
					"name": "joiningCustomerNames"
				},
				{
					"name": "NecessaryFields1"
				},
				{
					"name": "TotalRevenuePerUser"
				},
				{
					"name": "joiningCustomerName2"
				},
				{
					"name": "NecessaryFields2"
				},
				{
					"name": "MostPopularVenues"
				},
				{
					"name": "JoiningVenues2"
				},
				{
					"name": "NecessaryFields3"
				},
				{
					"name": "MostBookedSeat"
				},
				{
					"name": "rank1"
				},
				{
					"name": "MostBookedMatch"
				},
				{
					"name": "JoiningMatchName"
				},
				{
					"name": "JoiningVenues"
				},
				{
					"name": "NecessaryFields"
				},
				{
					"name": "TopMatches"
				}
			],
			"scriptLines": [
				"source(output(",
				"          booking_id as integer,",
				"          customer_id as integer,",
				"          match_id as integer,",
				"          seat_number as integer,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Booking",
				"source(output(",
				"          customer_id as integer,",
				"          customer_name as string,",
				"          customer_email as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customers",
				"source(output(",
				"          booking_id as integer,",
				"          customer_id as integer,",
				"          match_id as integer,",
				"          seat_number as integer,",
				"          price as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Booking1",
				"source(output(",
				"          match_id as integer,",
				"          match_date as date,",
				"          venue_id as integer,",
				"          category_id as integer,",
				"          match_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Matches",
				"source(output(",
				"          venue_id as integer,",
				"          venue_name as string,",
				"          venue_location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Venues",
				"source(output(",
				"          booking_id as integer,",
				"          customer_id as integer,",
				"          match_id as integer,",
				"          seat_number as integer,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Booking2",
				"source(output(",
				"          booking_id as integer,",
				"          customer_id as integer,",
				"          match_id as integer,",
				"          seat_number as integer,",
				"          price as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Bookings3",
				"Booking aggregate(groupBy(customer_id),",
				"     Number_of_tickets_by_customer = count(booking_id)) ~> NoOfTicketsByUser",
				"NoOfTicketsByUser, Customers join(NoOfTicketsByUser@customer_id == Customers@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningCustomerNames",
				"joiningCustomerNames select(mapColumn(",
				"          customer_id = Customers@customer_id,",
				"          customer_name,",
				"          Number_of_tickets_by_customer,",
				"          customer_email",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFields1",
				"Booking1 aggregate(groupBy(customer_id),",
				"     Total_revenue = sum(price)) ~> TotalRevenuePerUser",
				"TotalRevenuePerUser, Customers join(TotalRevenuePerUser@customer_id == Customers@customer_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningCustomerName2",
				"joiningCustomerName2 select(mapColumn(",
				"          customer_id = TotalRevenuePerUser@customer_id,",
				"          Total_revenue,",
				"          customer_id = Customers@customer_id,",
				"          customer_name,",
				"          customer_email",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFields2",
				"Matches aggregate(groupBy(venue_id),",
				"     total_event_happened = count(match_id)) ~> MostPopularVenues",
				"MostPopularVenues, Venues join(MostPopularVenues@venue_id == Venues@venue_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiningVenues2",
				"JoiningVenues2 select(mapColumn(",
				"          venue_id = Venues@venue_id,",
				"          venue_name,",
				"          venue_location,",
				"          total_event_happened",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFields3",
				"Booking2 aggregate(groupBy(seat_number),",
				"     count = count(booking_id)) ~> MostBookedSeat",
				"MostBookedSeat rank(desc(count, true),",
				"     output(Rank as long),",
				"     dense: true) ~> rank1",
				"Bookings3 aggregate(groupBy(match_id),",
				"     Count_tickets = count(booking_id)) ~> MostBookedMatch",
				"MostBookedMatch, Matches join(MostBookedMatch@match_id == Matches@match_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiningMatchName",
				"JoiningMatchName, Venues join(Matches@venue_id == Venues@venue_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiningVenues",
				"JoiningVenues select(mapColumn(",
				"          match_id = MostBookedMatch@match_id,",
				"          match_name,",
				"          venue_name,",
				"          venue_location,",
				"          Count_tickets,",
				"          match_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFields",
				"NecessaryFields rank(asc(Count_tickets, true),",
				"     output(Rank as long),",
				"     dense: true) ~> TopMatches",
				"NecessaryFields1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TicketsPerUser",
				"NecessaryFields2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerUser",
				"NecessaryFields3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MostPopularVenue",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MostBookedSeats",
				"TopMatches sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MostPopularMatches"
			]
		}
	}
}